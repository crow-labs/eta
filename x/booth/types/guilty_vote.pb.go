// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eta/booth/guilty_vote.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GuiltyVote struct {
	VoteId      uint64 `protobuf:"varint,1,opt,name=voteId,proto3" json:"voteId,omitempty"`
	PollId      uint64 `protobuf:"varint,2,opt,name=pollId,proto3" json:"pollId,omitempty"`
	VoterId     uint64 `protobuf:"varint,3,opt,name=voterId,proto3" json:"voterId,omitempty"`
	BuyerGuilt  bool   `protobuf:"varint,4,opt,name=buyerGuilt,proto3" json:"buyerGuilt,omitempty"`
	SellerGuilt bool   `protobuf:"varint,5,opt,name=sellerGuilt,proto3" json:"sellerGuilt,omitempty"`
}

func (m *GuiltyVote) Reset()         { *m = GuiltyVote{} }
func (m *GuiltyVote) String() string { return proto.CompactTextString(m) }
func (*GuiltyVote) ProtoMessage()    {}
func (*GuiltyVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7727a50ee5fbfe, []int{0}
}
func (m *GuiltyVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuiltyVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuiltyVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuiltyVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuiltyVote.Merge(m, src)
}
func (m *GuiltyVote) XXX_Size() int {
	return m.Size()
}
func (m *GuiltyVote) XXX_DiscardUnknown() {
	xxx_messageInfo_GuiltyVote.DiscardUnknown(m)
}

var xxx_messageInfo_GuiltyVote proto.InternalMessageInfo

func (m *GuiltyVote) GetVoteId() uint64 {
	if m != nil {
		return m.VoteId
	}
	return 0
}

func (m *GuiltyVote) GetPollId() uint64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *GuiltyVote) GetVoterId() uint64 {
	if m != nil {
		return m.VoterId
	}
	return 0
}

func (m *GuiltyVote) GetBuyerGuilt() bool {
	if m != nil {
		return m.BuyerGuilt
	}
	return false
}

func (m *GuiltyVote) GetSellerGuilt() bool {
	if m != nil {
		return m.SellerGuilt
	}
	return false
}

func init() {
	proto.RegisterType((*GuiltyVote)(nil), "crowlabs.eta.booth.GuiltyVote")
}

func init() { proto.RegisterFile("eta/booth/guilty_vote.proto", fileDescriptor_da7727a50ee5fbfe) }

var fileDescriptor_da7727a50ee5fbfe = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0x2d, 0x49, 0xd4,
	0x4f, 0xca, 0xcf, 0x2f, 0xc9, 0xd0, 0x4f, 0x2f, 0xcd, 0xcc, 0x29, 0xa9, 0x8c, 0x2f, 0xcb, 0x2f,
	0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4a, 0x2e, 0xca, 0x2f, 0xcf, 0x49, 0x4c,
	0x2a, 0xd6, 0x4b, 0x2d, 0x49, 0xd4, 0x03, 0xab, 0x52, 0x9a, 0xc1, 0xc8, 0xc5, 0xe5, 0x0e, 0x56,
	0x19, 0x96, 0x5f, 0x92, 0x2a, 0x24, 0xc6, 0xc5, 0x06, 0xd2, 0xe0, 0x99, 0x22, 0xc1, 0xa8, 0xc0,
	0xa8, 0xc1, 0x12, 0x04, 0xe5, 0x81, 0xc4, 0x0b, 0xf2, 0x73, 0x72, 0x3c, 0x53, 0x24, 0x98, 0x20,
	0xe2, 0x10, 0x9e, 0x90, 0x04, 0x17, 0x3b, 0x48, 0x45, 0x91, 0x67, 0x8a, 0x04, 0x33, 0x58, 0x02,
	0xc6, 0x15, 0x92, 0xe3, 0xe2, 0x4a, 0x2a, 0xad, 0x4c, 0x2d, 0x02, 0x1b, 0x2e, 0xc1, 0xa2, 0xc0,
	0xa8, 0xc1, 0x11, 0x84, 0x24, 0x22, 0xa4, 0xc0, 0xc5, 0x5d, 0x9c, 0x9a, 0x93, 0x03, 0x53, 0xc0,
	0x0a, 0x56, 0x80, 0x2c, 0xe4, 0xe4, 0x70, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c,
	0x51, 0x6a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x20, 0x3f, 0xe9,
	0x82, 0x3c, 0xa5, 0x0f, 0xf2, 0x7a, 0x05, 0xd4, 0xf3, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c,
	0x60, 0x7f, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x86, 0xf2, 0xb9, 0x16, 0x01, 0x00,
	0x00,
}

func (m *GuiltyVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuiltyVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuiltyVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellerGuilt {
		i--
		if m.SellerGuilt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BuyerGuilt {
		i--
		if m.BuyerGuilt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.VoterId != 0 {
		i = encodeVarintGuiltyVote(dAtA, i, uint64(m.VoterId))
		i--
		dAtA[i] = 0x18
	}
	if m.PollId != 0 {
		i = encodeVarintGuiltyVote(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x10
	}
	if m.VoteId != 0 {
		i = encodeVarintGuiltyVote(dAtA, i, uint64(m.VoteId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuiltyVote(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuiltyVote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GuiltyVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteId != 0 {
		n += 1 + sovGuiltyVote(uint64(m.VoteId))
	}
	if m.PollId != 0 {
		n += 1 + sovGuiltyVote(uint64(m.PollId))
	}
	if m.VoterId != 0 {
		n += 1 + sovGuiltyVote(uint64(m.VoterId))
	}
	if m.BuyerGuilt {
		n += 2
	}
	if m.SellerGuilt {
		n += 2
	}
	return n
}

func sovGuiltyVote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuiltyVote(x uint64) (n int) {
	return sovGuiltyVote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuiltyVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuiltyVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuiltyVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuiltyVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			m.VoteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuiltyVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuiltyVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			m.VoterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuiltyVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerGuilt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuiltyVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuyerGuilt = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerGuilt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuiltyVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SellerGuilt = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuiltyVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuiltyVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuiltyVote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuiltyVote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuiltyVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuiltyVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuiltyVote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuiltyVote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuiltyVote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuiltyVote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuiltyVote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuiltyVote = fmt.Errorf("proto: unexpected end of group")
)
