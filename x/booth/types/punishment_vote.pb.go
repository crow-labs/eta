// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eta/booth/punishment_vote.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PunishmentVote struct {
	VoteId       uint64     `protobuf:"varint,1,opt,name=voteId,proto3" json:"voteId,omitempty"`
	PollId       uint64     `protobuf:"varint,2,opt,name=pollId,proto3" json:"pollId,omitempty"`
	VoterId      uint64     `protobuf:"varint,3,opt,name=voterId,proto3" json:"voterId,omitempty"`
	JailTime     uint64     `protobuf:"varint,4,opt,name=jailTime,proto3" json:"jailTime,omitempty"`
	Blacklist    bool       `protobuf:"varint,5,opt,name=blacklist,proto3" json:"blacklist,omitempty"`
	RefundAmount types.Coin `protobuf:"bytes,6,opt,name=refundAmount,proto3" json:"refundAmount"`
}

func (m *PunishmentVote) Reset()         { *m = PunishmentVote{} }
func (m *PunishmentVote) String() string { return proto.CompactTextString(m) }
func (*PunishmentVote) ProtoMessage()    {}
func (*PunishmentVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1215a7b058c96a8, []int{0}
}
func (m *PunishmentVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PunishmentVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PunishmentVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PunishmentVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PunishmentVote.Merge(m, src)
}
func (m *PunishmentVote) XXX_Size() int {
	return m.Size()
}
func (m *PunishmentVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PunishmentVote.DiscardUnknown(m)
}

var xxx_messageInfo_PunishmentVote proto.InternalMessageInfo

func (m *PunishmentVote) GetVoteId() uint64 {
	if m != nil {
		return m.VoteId
	}
	return 0
}

func (m *PunishmentVote) GetPollId() uint64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *PunishmentVote) GetVoterId() uint64 {
	if m != nil {
		return m.VoterId
	}
	return 0
}

func (m *PunishmentVote) GetJailTime() uint64 {
	if m != nil {
		return m.JailTime
	}
	return 0
}

func (m *PunishmentVote) GetBlacklist() bool {
	if m != nil {
		return m.Blacklist
	}
	return false
}

func (m *PunishmentVote) GetRefundAmount() types.Coin {
	if m != nil {
		return m.RefundAmount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*PunishmentVote)(nil), "crowlabs.eta.booth.PunishmentVote")
}

func init() { proto.RegisterFile("eta/booth/punishment_vote.proto", fileDescriptor_e1215a7b058c96a8) }

var fileDescriptor_e1215a7b058c96a8 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4e, 0x32, 0x31,
	0x18, 0xc6, 0xa7, 0xdf, 0x87, 0x88, 0xd5, 0xb8, 0x68, 0x8c, 0xa9, 0xc4, 0x14, 0xe2, 0xc2, 0xb0,
	0xb1, 0x0d, 0x7a, 0x01, 0x85, 0x15, 0x3b, 0x43, 0x8c, 0x0b, 0x37, 0xa6, 0x9d, 0xa9, 0x50, 0x9d,
	0xe9, 0x3b, 0x99, 0x76, 0x50, 0x6f, 0xe1, 0xb1, 0x58, 0xb2, 0xd4, 0x8d, 0x31, 0x70, 0x11, 0xd3,
	0x19, 0xc4, 0xb8, 0xeb, 0xf3, 0xa7, 0x79, 0xf3, 0xfc, 0x70, 0x47, 0x7b, 0x29, 0x14, 0x80, 0x9f,
	0x8a, 0xbc, 0xb4, 0xc6, 0x4d, 0x33, 0x6d, 0xfd, 0xfd, 0x0c, 0xbc, 0xe6, 0x79, 0x01, 0x1e, 0x08,
	0x89, 0x0b, 0x78, 0x4e, 0xa5, 0x72, 0x5c, 0x7b, 0xc9, 0xab, 0x66, 0xfb, 0x60, 0x02, 0x13, 0xa8,
	0x62, 0x11, 0x5e, 0x75, 0xb3, 0xcd, 0x62, 0x70, 0x19, 0x38, 0xa1, 0xa4, 0xd3, 0x62, 0xd6, 0x57,
	0xda, 0xcb, 0xbe, 0x88, 0xc1, 0xd8, 0x3a, 0x3f, 0xf9, 0x40, 0x78, 0xff, 0x7a, 0x73, 0xe3, 0x16,
	0xbc, 0x26, 0x87, 0xb8, 0x19, 0x4e, 0x8d, 0x12, 0x8a, 0xba, 0xa8, 0xd7, 0x18, 0xaf, 0x55, 0xf0,
	0x73, 0x48, 0xd3, 0x51, 0x42, 0xff, 0xd5, 0x7e, 0xad, 0x08, 0xc5, 0xdb, 0xa1, 0x51, 0x8c, 0x12,
	0xfa, 0xbf, 0x0a, 0x7e, 0x24, 0x69, 0xe3, 0xd6, 0xa3, 0x34, 0xe9, 0x8d, 0xc9, 0x34, 0x6d, 0x54,
	0xd1, 0x46, 0x93, 0x63, 0xbc, 0xa3, 0x52, 0x19, 0x3f, 0xa5, 0xc6, 0x79, 0xba, 0xd5, 0x45, 0xbd,
	0xd6, 0xf8, 0xd7, 0x20, 0x43, 0xbc, 0x57, 0xe8, 0x87, 0xd2, 0x26, 0x57, 0x19, 0x94, 0xd6, 0xd3,
	0x66, 0x17, 0xf5, 0x76, 0xcf, 0x8f, 0x78, 0xbd, 0x86, 0x87, 0x35, 0x7c, 0xbd, 0x86, 0x0f, 0xc1,
	0xd8, 0x41, 0x63, 0xfe, 0xd9, 0x89, 0xc6, 0x7f, 0x3e, 0x0d, 0x2e, 0xe7, 0x4b, 0x86, 0x16, 0x4b,
	0x86, 0xbe, 0x96, 0x0c, 0xbd, 0xad, 0x58, 0xb4, 0x58, 0xb1, 0xe8, 0x7d, 0xc5, 0xa2, 0xbb, 0xd3,
	0x89, 0xf1, 0xd3, 0x52, 0xf1, 0x18, 0x32, 0x11, 0x50, 0x9e, 0x05, 0x96, 0x22, 0x50, 0x7f, 0x59,
	0x73, 0xf7, 0xaf, 0xb9, 0x76, 0xaa, 0x59, 0x41, 0xba, 0xf8, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xd5,
	0x10, 0x9a, 0x65, 0x91, 0x01, 0x00, 0x00,
}

func (m *PunishmentVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PunishmentVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PunishmentVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RefundAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPunishmentVote(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Blacklist {
		i--
		if m.Blacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.JailTime != 0 {
		i = encodeVarintPunishmentVote(dAtA, i, uint64(m.JailTime))
		i--
		dAtA[i] = 0x20
	}
	if m.VoterId != 0 {
		i = encodeVarintPunishmentVote(dAtA, i, uint64(m.VoterId))
		i--
		dAtA[i] = 0x18
	}
	if m.PollId != 0 {
		i = encodeVarintPunishmentVote(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x10
	}
	if m.VoteId != 0 {
		i = encodeVarintPunishmentVote(dAtA, i, uint64(m.VoteId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPunishmentVote(dAtA []byte, offset int, v uint64) int {
	offset -= sovPunishmentVote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PunishmentVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteId != 0 {
		n += 1 + sovPunishmentVote(uint64(m.VoteId))
	}
	if m.PollId != 0 {
		n += 1 + sovPunishmentVote(uint64(m.PollId))
	}
	if m.VoterId != 0 {
		n += 1 + sovPunishmentVote(uint64(m.VoterId))
	}
	if m.JailTime != 0 {
		n += 1 + sovPunishmentVote(uint64(m.JailTime))
	}
	if m.Blacklist {
		n += 2
	}
	l = m.RefundAmount.Size()
	n += 1 + l + sovPunishmentVote(uint64(l))
	return n
}

func sovPunishmentVote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPunishmentVote(x uint64) (n int) {
	return sovPunishmentVote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PunishmentVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPunishmentVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PunishmentVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PunishmentVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteId", wireType)
			}
			m.VoteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishmentVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishmentVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterId", wireType)
			}
			m.VoterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishmentVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoterId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailTime", wireType)
			}
			m.JailTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishmentVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishmentVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blacklist = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPunishmentVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPunishmentVote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPunishmentVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPunishmentVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPunishmentVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPunishmentVote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPunishmentVote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPunishmentVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPunishmentVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPunishmentVote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPunishmentVote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPunishmentVote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPunishmentVote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPunishmentVote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPunishmentVote = fmt.Errorf("proto: unexpected end of group")
)
