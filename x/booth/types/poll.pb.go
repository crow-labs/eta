// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eta/booth/poll.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Poll struct {
	PollId            uint64     `protobuf:"varint,1,opt,name=pollId,proto3" json:"pollId,omitempty"`
	Funding           types.Coin `protobuf:"bytes,2,opt,name=funding,proto3" json:"funding"`
	DisputeId         uint64     `protobuf:"varint,3,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	GuiltyVotes       []uint64   `protobuf:"varint,4,rep,packed,name=guiltyVotes,proto3" json:"guiltyVotes,omitempty"`
	GuiltVerdict      string     `protobuf:"bytes,5,opt,name=guiltVerdict,proto3" json:"guiltVerdict,omitempty"`
	PunishmentVotes   []uint64   `protobuf:"varint,6,rep,packed,name=punishmentVotes,proto3" json:"punishmentVotes,omitempty"`
	PunishmentVerdict string     `protobuf:"bytes,7,opt,name=punishmentVerdict,proto3" json:"punishmentVerdict,omitempty"`
}

func (m *Poll) Reset()         { *m = Poll{} }
func (m *Poll) String() string { return proto.CompactTextString(m) }
func (*Poll) ProtoMessage()    {}
func (*Poll) Descriptor() ([]byte, []int) {
	return fileDescriptor_191cbb1c4c9f8ce6, []int{0}
}
func (m *Poll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Poll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Poll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Poll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Poll.Merge(m, src)
}
func (m *Poll) XXX_Size() int {
	return m.Size()
}
func (m *Poll) XXX_DiscardUnknown() {
	xxx_messageInfo_Poll.DiscardUnknown(m)
}

var xxx_messageInfo_Poll proto.InternalMessageInfo

func (m *Poll) GetPollId() uint64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *Poll) GetFunding() types.Coin {
	if m != nil {
		return m.Funding
	}
	return types.Coin{}
}

func (m *Poll) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *Poll) GetGuiltyVotes() []uint64 {
	if m != nil {
		return m.GuiltyVotes
	}
	return nil
}

func (m *Poll) GetGuiltVerdict() string {
	if m != nil {
		return m.GuiltVerdict
	}
	return ""
}

func (m *Poll) GetPunishmentVotes() []uint64 {
	if m != nil {
		return m.PunishmentVotes
	}
	return nil
}

func (m *Poll) GetPunishmentVerdict() string {
	if m != nil {
		return m.PunishmentVerdict
	}
	return ""
}

func init() {
	proto.RegisterType((*Poll)(nil), "crowlabs.eta.booth.Poll")
}

func init() { proto.RegisterFile("eta/booth/poll.proto", fileDescriptor_191cbb1c4c9f8ce6) }

var fileDescriptor_191cbb1c4c9f8ce6 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xe3, 0x36, 0x5f, 0xab, 0xba, 0x9f, 0x84, 0xb0, 0x2a, 0x14, 0x2a, 0x64, 0xa2, 0x0e,
	0x28, 0x03, 0xd8, 0x2a, 0x4c, 0x6c, 0xa8, 0x4c, 0xdd, 0x50, 0x86, 0x0e, 0x6c, 0xf9, 0x31, 0xa9,
	0xa5, 0x34, 0x27, 0xaa, 0x1d, 0xa0, 0x77, 0xc1, 0xc2, 0x3d, 0x75, 0xec, 0xc8, 0x84, 0x50, 0x7b,
	0x23, 0xc8, 0x4e, 0x10, 0x05, 0x36, 0x9f, 0xe7, 0x3d, 0x7a, 0x2c, 0x9d, 0x17, 0x0f, 0x84, 0x8e,
	0x78, 0x0c, 0xa0, 0xe7, 0xbc, 0x84, 0x3c, 0x67, 0xe5, 0x12, 0x34, 0x10, 0x92, 0x2c, 0xe1, 0x29,
	0x8f, 0x62, 0xc5, 0x84, 0x8e, 0x98, 0x8d, 0x87, 0x83, 0x0c, 0x32, 0xb0, 0x31, 0x37, 0xaf, 0x7a,
	0x73, 0x48, 0x13, 0x50, 0x0b, 0x50, 0x3c, 0x8e, 0x94, 0xe0, 0x8f, 0xe3, 0x58, 0xe8, 0x68, 0xcc,
	0x13, 0x90, 0x45, 0x9d, 0x8f, 0x5e, 0x5b, 0xd8, 0xbd, 0x83, 0x3c, 0x27, 0x47, 0xb8, 0x63, 0x3e,
	0x98, 0xa6, 0x1e, 0xf2, 0x51, 0xe0, 0x86, 0xcd, 0x44, 0xae, 0x71, 0xf7, 0xa1, 0x2a, 0x52, 0x59,
	0x64, 0x5e, 0xcb, 0x47, 0x41, 0xff, 0xf2, 0x98, 0xd5, 0x4a, 0x66, 0x94, 0xac, 0x51, 0xb2, 0x5b,
	0x90, 0xc5, 0xc4, 0x5d, 0xbf, 0x9f, 0x3a, 0xe1, 0xd7, 0x3e, 0x39, 0xc1, 0xbd, 0x54, 0xaa, 0xb2,
	0xd2, 0x62, 0x9a, 0x7a, 0x6d, 0x6b, 0xfd, 0x06, 0xc4, 0xc7, 0xfd, 0xac, 0x92, 0xb9, 0x5e, 0xcd,
	0x40, 0x0b, 0xe5, 0xb9, 0x7e, 0x3b, 0x70, 0xc3, 0x7d, 0x44, 0x46, 0xf8, 0xbf, 0x1d, 0x67, 0x62,
	0x99, 0xca, 0x44, 0x7b, 0xff, 0x7c, 0x14, 0xf4, 0xc2, 0x1f, 0x8c, 0x04, 0xf8, 0xa0, 0xac, 0x0a,
	0xa9, 0xe6, 0x0b, 0x51, 0xe8, 0xda, 0xd4, 0xb1, 0xa6, 0xdf, 0x98, 0x9c, 0xe3, 0xc3, 0x3d, 0xd4,
	0x28, 0xbb, 0x56, 0xf9, 0x37, 0x98, 0xdc, 0xac, 0xb7, 0x14, 0x6d, 0xb6, 0x14, 0x7d, 0x6c, 0x29,
	0x7a, 0xd9, 0x51, 0x67, 0xb3, 0xa3, 0xce, 0xdb, 0x8e, 0x3a, 0xf7, 0x67, 0x99, 0xd4, 0xf3, 0x2a,
	0x66, 0x09, 0x2c, 0xb8, 0xa9, 0xe1, 0xc2, 0xf4, 0xc0, 0x4d, 0x4d, 0xcf, 0x4d, 0x51, 0x7a, 0x55,
	0x0a, 0x15, 0x77, 0xec, 0x81, 0xaf, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x8b, 0x10, 0x05,
	0xc2, 0x01, 0x00, 0x00,
}

func (m *Poll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Poll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Poll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PunishmentVerdict) > 0 {
		i -= len(m.PunishmentVerdict)
		copy(dAtA[i:], m.PunishmentVerdict)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.PunishmentVerdict)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PunishmentVotes) > 0 {
		dAtA2 := make([]byte, len(m.PunishmentVotes)*10)
		var j1 int
		for _, num := range m.PunishmentVotes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPoll(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GuiltVerdict) > 0 {
		i -= len(m.GuiltVerdict)
		copy(dAtA[i:], m.GuiltVerdict)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.GuiltVerdict)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GuiltyVotes) > 0 {
		dAtA4 := make([]byte, len(m.GuiltyVotes)*10)
		var j3 int
		for _, num := range m.GuiltyVotes {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPoll(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if m.DisputeId != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Funding.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoll(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PollId != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoll(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoll(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Poll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PollId != 0 {
		n += 1 + sovPoll(uint64(m.PollId))
	}
	l = m.Funding.Size()
	n += 1 + l + sovPoll(uint64(l))
	if m.DisputeId != 0 {
		n += 1 + sovPoll(uint64(m.DisputeId))
	}
	if len(m.GuiltyVotes) > 0 {
		l = 0
		for _, e := range m.GuiltyVotes {
			l += sovPoll(uint64(e))
		}
		n += 1 + sovPoll(uint64(l)) + l
	}
	l = len(m.GuiltVerdict)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	if len(m.PunishmentVotes) > 0 {
		l = 0
		for _, e := range m.PunishmentVotes {
			l += sovPoll(uint64(e))
		}
		n += 1 + sovPoll(uint64(l)) + l
	}
	l = len(m.PunishmentVerdict)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	return n
}

func sovPoll(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoll(x uint64) (n int) {
	return sovPoll(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Poll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Poll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Poll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Funding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GuiltyVotes = append(m.GuiltyVotes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPoll
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPoll
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GuiltyVotes) == 0 {
					m.GuiltyVotes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPoll
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GuiltyVotes = append(m.GuiltyVotes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GuiltyVotes", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuiltVerdict", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuiltVerdict = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PunishmentVotes = append(m.PunishmentVotes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPoll
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPoll
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PunishmentVotes) == 0 {
					m.PunishmentVotes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPoll
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PunishmentVotes = append(m.PunishmentVotes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PunishmentVotes", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PunishmentVerdict", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PunishmentVerdict = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoll(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoll
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoll
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoll
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoll
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoll        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoll          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoll = fmt.Errorf("proto: unexpected end of group")
)
