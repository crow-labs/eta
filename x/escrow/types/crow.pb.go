// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eta/escrow/crow.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Crow struct {
	CrowId           uint64     `protobuf:"varint,1,opt,name=crowId,proto3" json:"crowId,omitempty"`
	ListingId        uint64     `protobuf:"varint,2,opt,name=listingId,proto3" json:"listingId,omitempty"`
	OrderId          uint64     `protobuf:"varint,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	SellerCollateral types.Coin `protobuf:"bytes,4,opt,name=sellerCollateral,proto3" json:"sellerCollateral"`
	BuyerCollateral  types.Coin `protobuf:"bytes,5,opt,name=buyerCollateral,proto3" json:"buyerCollateral"`
	Payment          types.Coin `protobuf:"bytes,6,opt,name=payment,proto3" json:"payment"`
	ItemId           uint64     `protobuf:"varint,7,opt,name=itemId,proto3" json:"itemId,omitempty"`
	DisputeIds       []uint64   `protobuf:"varint,8,rep,packed,name=disputeIds,proto3" json:"disputeIds,omitempty"`
}

func (m *Crow) Reset()         { *m = Crow{} }
func (m *Crow) String() string { return proto.CompactTextString(m) }
func (*Crow) ProtoMessage()    {}
func (*Crow) Descriptor() ([]byte, []int) {
	return fileDescriptor_9834f869ea6e8f66, []int{0}
}
func (m *Crow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Crow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Crow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Crow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crow.Merge(m, src)
}
func (m *Crow) XXX_Size() int {
	return m.Size()
}
func (m *Crow) XXX_DiscardUnknown() {
	xxx_messageInfo_Crow.DiscardUnknown(m)
}

var xxx_messageInfo_Crow proto.InternalMessageInfo

func (m *Crow) GetCrowId() uint64 {
	if m != nil {
		return m.CrowId
	}
	return 0
}

func (m *Crow) GetListingId() uint64 {
	if m != nil {
		return m.ListingId
	}
	return 0
}

func (m *Crow) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *Crow) GetSellerCollateral() types.Coin {
	if m != nil {
		return m.SellerCollateral
	}
	return types.Coin{}
}

func (m *Crow) GetBuyerCollateral() types.Coin {
	if m != nil {
		return m.BuyerCollateral
	}
	return types.Coin{}
}

func (m *Crow) GetPayment() types.Coin {
	if m != nil {
		return m.Payment
	}
	return types.Coin{}
}

func (m *Crow) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *Crow) GetDisputeIds() []uint64 {
	if m != nil {
		return m.DisputeIds
	}
	return nil
}

func init() {
	proto.RegisterType((*Crow)(nil), "crowlabs.eta.escrow.Crow")
}

func init() { proto.RegisterFile("eta/escrow/crow.proto", fileDescriptor_9834f869ea6e8f66) }

var fileDescriptor_9834f869ea6e8f66 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x4d, 0xda, 0xd0, 0x82, 0x19, 0x40, 0xe6, 0x43, 0xa6, 0x42, 0xa6, 0x62, 0xa1, 0x0b, 0xb6,
	0x0a, 0x13, 0x23, 0xed, 0x14, 0xb1, 0x75, 0x64, 0x73, 0x62, 0x2b, 0x58, 0x72, 0xe2, 0xc8, 0x76,
	0x29, 0xfd, 0x17, 0xfc, 0xac, 0x8e, 0x1d, 0x99, 0x10, 0xb4, 0x7f, 0x04, 0x39, 0x69, 0xc4, 0xd7,
	0xd2, 0xe5, 0x74, 0xef, 0xde, 0xdd, 0xd3, 0xd3, 0x3d, 0x70, 0x22, 0x1c, 0xa3, 0xc2, 0xa6, 0x46,
	0xcf, 0xa8, 0x2f, 0xa4, 0x34, 0xda, 0x69, 0x78, 0xe4, 0x7b, 0xc5, 0x12, 0x4b, 0x84, 0x63, 0xa4,
	0xe6, 0x7b, 0xc7, 0x99, 0xce, 0x74, 0xc5, 0x53, 0xdf, 0xd5, 0xab, 0x3d, 0x9c, 0x6a, 0x9b, 0x6b,
	0x4b, 0x13, 0x66, 0x05, 0x7d, 0x1e, 0x26, 0xc2, 0xb1, 0x21, 0x4d, 0xb5, 0x2c, 0x6a, 0xfe, 0xf2,
	0xb3, 0x05, 0xa2, 0xb1, 0xd1, 0x33, 0x78, 0x0a, 0x3a, 0x5e, 0x26, 0xe6, 0x28, 0xec, 0x87, 0x83,
	0x68, 0xb2, 0x41, 0xf0, 0x1c, 0xec, 0x29, 0x69, 0x9d, 0x2c, 0xb2, 0x98, 0xa3, 0x56, 0x45, 0x7d,
	0x0f, 0x20, 0x02, 0x5d, 0x6d, 0xb8, 0x30, 0x31, 0x47, 0xed, 0x8a, 0x6b, 0x20, 0x7c, 0x00, 0x87,
	0x56, 0x28, 0x25, 0xcc, 0x58, 0x2b, 0xc5, 0x9c, 0x30, 0x4c, 0xa1, 0xa8, 0x1f, 0x0e, 0xf6, 0x6f,
	0xce, 0x48, 0xed, 0x89, 0x78, 0x4f, 0x64, 0xe3, 0x89, 0x8c, 0xb5, 0x2c, 0x46, 0xd1, 0xe2, 0xfd,
	0x22, 0x98, 0xfc, 0x3b, 0x84, 0x31, 0x38, 0x48, 0xa6, 0xf3, 0x5f, 0x5a, 0x3b, 0xdb, 0x69, 0xfd,
	0xbd, 0x83, 0x77, 0xa0, 0x5b, 0xb2, 0x79, 0x2e, 0x0a, 0x87, 0x3a, 0xdb, 0x49, 0x34, 0xfb, 0xfe,
	0x45, 0xd2, 0x89, 0x3c, 0xe6, 0xa8, 0x5b, 0xbf, 0xa8, 0x46, 0x10, 0x03, 0xc0, 0xa5, 0x2d, 0xa7,
	0x4e, 0xc4, 0xdc, 0xa2, 0xdd, 0x7e, 0x7b, 0x10, 0x4d, 0x7e, 0x4c, 0x46, 0xf7, 0x8b, 0x15, 0x0e,
	0x97, 0x2b, 0x1c, 0x7e, 0xac, 0x70, 0xf8, 0xba, 0xc6, 0xc1, 0x72, 0x8d, 0x83, 0xb7, 0x35, 0x0e,
	0x1e, 0xaf, 0x32, 0xe9, 0x9e, 0xa6, 0x09, 0x49, 0x75, 0x5e, 0xe5, 0x7b, 0xed, 0x43, 0xa5, 0x3e,
	0xf4, 0x97, 0x26, 0x76, 0x37, 0x2f, 0x85, 0x4d, 0x3a, 0x55, 0x5a, 0xb7, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xf0, 0x90, 0x9e, 0xce, 0x11, 0x02, 0x00, 0x00,
}

func (m *Crow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Crow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Crow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DisputeIds) > 0 {
		dAtA2 := make([]byte, len(m.DisputeIds)*10)
		var j1 int
		for _, num := range m.DisputeIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCrow(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if m.ItemId != 0 {
		i = encodeVarintCrow(dAtA, i, uint64(m.ItemId))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.BuyerCollateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.SellerCollateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.OrderId != 0 {
		i = encodeVarintCrow(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.ListingId != 0 {
		i = encodeVarintCrow(dAtA, i, uint64(m.ListingId))
		i--
		dAtA[i] = 0x10
	}
	if m.CrowId != 0 {
		i = encodeVarintCrow(dAtA, i, uint64(m.CrowId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Crow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrowId != 0 {
		n += 1 + sovCrow(uint64(m.CrowId))
	}
	if m.ListingId != 0 {
		n += 1 + sovCrow(uint64(m.ListingId))
	}
	if m.OrderId != 0 {
		n += 1 + sovCrow(uint64(m.OrderId))
	}
	l = m.SellerCollateral.Size()
	n += 1 + l + sovCrow(uint64(l))
	l = m.BuyerCollateral.Size()
	n += 1 + l + sovCrow(uint64(l))
	l = m.Payment.Size()
	n += 1 + l + sovCrow(uint64(l))
	if m.ItemId != 0 {
		n += 1 + sovCrow(uint64(m.ItemId))
	}
	if len(m.DisputeIds) > 0 {
		l = 0
		for _, e := range m.DisputeIds {
			l += sovCrow(uint64(e))
		}
		n += 1 + sovCrow(uint64(l)) + l
	}
	return n
}

func sovCrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrow(x uint64) (n int) {
	return sovCrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Crow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Crow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Crow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrowId", wireType)
			}
			m.CrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrowId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingId", wireType)
			}
			m.ListingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellerCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuyerCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCrow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DisputeIds = append(m.DisputeIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCrow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCrow
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCrow
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DisputeIds) == 0 {
					m.DisputeIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCrow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DisputeIds = append(m.DisputeIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrow = fmt.Errorf("proto: unexpected end of group")
)
